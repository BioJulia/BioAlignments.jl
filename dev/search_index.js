var documenterSearchIndex = {"docs":
[{"location":"references/#API-Reference-1","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"references/#Operations-1","page":"API Reference","title":"Operations","text":"","category":"section"},{"location":"references/#","page":"API Reference","title":"API Reference","text":"Operation\nOP_MATCH\nOP_INSERT\nOP_DELETE\nOP_SKIP\nOP_SOFT_CLIP\nOP_HARD_CLIP\nOP_PAD\nOP_SEQ_MATCH\nOP_SEQ_MISMATCH\nOP_BACK\nOP_START\nismatchop\nisinsertop\nisdeleteop","category":"page"},{"location":"references/#BioAlignments.Operation","page":"API Reference","title":"BioAlignments.Operation","text":"Alignment operation.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.OP_MATCH","page":"API Reference","title":"BioAlignments.OP_MATCH","text":"'M': non-specific match\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_INSERT","page":"API Reference","title":"BioAlignments.OP_INSERT","text":"'I': insertion into reference sequence\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_DELETE","page":"API Reference","title":"BioAlignments.OP_DELETE","text":"'D': deletion from reference sequence\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_SKIP","page":"API Reference","title":"BioAlignments.OP_SKIP","text":"'N': (typically long) deletion from the reference, e.g. due to RNA splicing\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_SOFT_CLIP","page":"API Reference","title":"BioAlignments.OP_SOFT_CLIP","text":"'S': sequence removed from the beginning or end of the query sequence but stored\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_HARD_CLIP","page":"API Reference","title":"BioAlignments.OP_HARD_CLIP","text":"'H': sequence removed from the beginning or end of the query sequence and not stored\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_PAD","page":"API Reference","title":"BioAlignments.OP_PAD","text":"'P': not currently supported, but present for SAM/BAM compatibility\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_SEQ_MATCH","page":"API Reference","title":"BioAlignments.OP_SEQ_MATCH","text":"'=': match operation with matching sequence positions\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_SEQ_MISMATCH","page":"API Reference","title":"BioAlignments.OP_SEQ_MISMATCH","text":"'X': match operation with mismatching sequence positions\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_BACK","page":"API Reference","title":"BioAlignments.OP_BACK","text":"'B': not currently supported, but present for SAM/BAM compatibility\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.OP_START","page":"API Reference","title":"BioAlignments.OP_START","text":"'0': indicate the start of an alignment within the reference and query sequence\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.ismatchop","page":"API Reference","title":"BioAlignments.ismatchop","text":"ismatchop(op::Operation)\n\nTest if op is a match operation (i.e. op ∈ (OP_MATCH, OP_SEQ_MATCH, OP_SEQ_MISMATCH)).\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.isinsertop","page":"API Reference","title":"BioAlignments.isinsertop","text":"isinsertop(op::Operation)\n\nTest if op is a insertion operation (i.e. op ∈ (OP_INSERT, OP_SOFT_CLIP, OP_HARD_CLIP)).\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.isdeleteop","page":"API Reference","title":"BioAlignments.isdeleteop","text":"isdeleteop(op::Operation)\n\nTest if op is a deletion operation (i.e. op ∈ (OP_DELETE, OP_SKIP)).\n\n\n\n\n\n","category":"function"},{"location":"references/#Alignments-1","page":"API Reference","title":"Alignments","text":"","category":"section"},{"location":"references/#","page":"API Reference","title":"API Reference","text":"AlignmentAnchor\nAlignment\nAlignment(::Vector{AlignmentAnchor}, ::Bool)\nAlignment(::AbstractString, ::Int, ::Int)\nseq2ref(::Alignment, ::Integer)\nref2seq(::Alignment, ::Integer)\ncigar(::Alignment)","category":"page"},{"location":"references/#BioAlignments.AlignmentAnchor","page":"API Reference","title":"BioAlignments.AlignmentAnchor","text":"Alignment operation with anchoring positions.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.Alignment","page":"API Reference","title":"BioAlignments.Alignment","text":"Alignment of two sequences.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.Alignment-Tuple{Array{AlignmentAnchor,1},Bool}","page":"API Reference","title":"BioAlignments.Alignment","text":"Alignment(anchors::Vector{AlignmentAnchor}, check=true)\n\nCreate an alignment object from a sequence of alignment anchors.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.Alignment-Tuple{AbstractString,Int64,Int64}","page":"API Reference","title":"BioAlignments.Alignment","text":"Alignment(cigar::AbstractString, seqpos=1, refpos=1)\n\nMake an alignment object from a CIGAR string.\n\nseqpos and refpos specify the starting positions of two sequences.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.seq2ref-Tuple{Alignment,Integer}","page":"API Reference","title":"BioAlignments.seq2ref","text":"seq2ref(aln::Alignment, i::Integer)::Tuple{Int,Operation}\n\nMap a position i from sequence to reference.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.ref2seq-Tuple{Alignment,Integer}","page":"API Reference","title":"BioAlignments.ref2seq","text":"ref2seq(aln::Alignment, i::Integer)::Tuple{Int,Operation}\n\nMap a position i from reference to sequence.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.cigar-Tuple{Alignment}","page":"API Reference","title":"BioAlignments.cigar","text":"cigar(aln::Alignment)\n\nMake a CIGAR string encoding of aln.\n\nThis is not entirely lossless as it discards the alignments start positions.\n\n\n\n\n\n","category":"method"},{"location":"references/#Substitution-matrices-1","page":"API Reference","title":"Substitution matrices","text":"","category":"section"},{"location":"references/#","page":"API Reference","title":"API Reference","text":"AbstractSubstitutionMatrix\nSubstitutionMatrix\nDichotomousSubstitutionMatrix\nEDNAFULL\nPAM30\nPAM70\nPAM250\nBLOSUM45\nBLOSUM50\nBLOSUM62\nBLOSUM80\nBLOSUM90","category":"page"},{"location":"references/#BioAlignments.AbstractSubstitutionMatrix","page":"API Reference","title":"BioAlignments.AbstractSubstitutionMatrix","text":"Supertype of substitution matrix.\n\nThe required method:\n\nBase.getindex(submat, x, y): substitution score/cost from x to y\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.SubstitutionMatrix","page":"API Reference","title":"BioAlignments.SubstitutionMatrix","text":"Substitution matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.DichotomousSubstitutionMatrix","page":"API Reference","title":"BioAlignments.DichotomousSubstitutionMatrix","text":"Dichotomous substitution matrix.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.EDNAFULL","page":"API Reference","title":"BioAlignments.EDNAFULL","text":"EDNAFULL (or NUC4.4) substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.PAM30","page":"API Reference","title":"BioAlignments.PAM30","text":"PAM30 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.PAM70","page":"API Reference","title":"BioAlignments.PAM70","text":"PAM70 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.PAM250","page":"API Reference","title":"BioAlignments.PAM250","text":"PAM250 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.BLOSUM45","page":"API Reference","title":"BioAlignments.BLOSUM45","text":"BLOSUM45 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.BLOSUM50","page":"API Reference","title":"BioAlignments.BLOSUM50","text":"BLOSUM50 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.BLOSUM62","page":"API Reference","title":"BioAlignments.BLOSUM62","text":"BLOSUM62 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.BLOSUM80","page":"API Reference","title":"BioAlignments.BLOSUM80","text":"BLOSUM80 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#BioAlignments.BLOSUM90","page":"API Reference","title":"BioAlignments.BLOSUM90","text":"BLOSUM90 substitution matrix\n\n\n\n\n\n","category":"constant"},{"location":"references/#Pairwise-alignments-1","page":"API Reference","title":"Pairwise alignments","text":"","category":"section"},{"location":"references/#","page":"API Reference","title":"API Reference","text":"PairwiseAlignment\nBase.count(::PairwiseAlignment, ::Operation)\ncount_matches\ncount_mismatches\ncount_insertions\ncount_deletions\ncount_aligned\nGlobalAlignment\nSemiGlobalAlignment\nOverlapAlignment\nLocalAlignment\nEditDistance\nHammingDistance\nLevenshteinDistance\nAbstractScoreModel\nAffineGapScoreModel\nAbstractCostModel\nCostModel\nPairwiseAlignmentResult\npairalign\nscore\ndistance\nalignment\nhasalignment\nseq2ref(::PairwiseAlignment, ::Integer)\nref2seq(::PairwiseAlignment, ::Integer)","category":"page"},{"location":"references/#BioAlignments.PairwiseAlignment","page":"API Reference","title":"BioAlignments.PairwiseAlignment","text":"Pairwise alignment\n\n\n\n\n\n","category":"type"},{"location":"references/#Base.count-Tuple{PairwiseAlignment,Operation}","page":"API Reference","title":"Base.count","text":"count(aln::PairwiseAlignment, target::Operation)\n\nCount the number of positions where the target operation is applied.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.count_matches","page":"API Reference","title":"BioAlignments.count_matches","text":"count_matches(aln)\n\nCount the number of matching positions.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.count_mismatches","page":"API Reference","title":"BioAlignments.count_mismatches","text":"count_mismatches(aln)\n\nCount the number of mismatching positions.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.count_insertions","page":"API Reference","title":"BioAlignments.count_insertions","text":"count_insertions(aln)\n\nCount the number of inserting positions.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.count_deletions","page":"API Reference","title":"BioAlignments.count_deletions","text":"count_deletions(aln)\n\nCount the number of deleting positions.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.count_aligned","page":"API Reference","title":"BioAlignments.count_aligned","text":"count_aligned(aln)\n\nCount the number of aligned positions.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.GlobalAlignment","page":"API Reference","title":"BioAlignments.GlobalAlignment","text":"Global-global alignment with end gap penalties.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.SemiGlobalAlignment","page":"API Reference","title":"BioAlignments.SemiGlobalAlignment","text":"Global-local alignment.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.OverlapAlignment","page":"API Reference","title":"BioAlignments.OverlapAlignment","text":"Global-global alignment without end gap penalties.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.LocalAlignment","page":"API Reference","title":"BioAlignments.LocalAlignment","text":"Local-local alignment.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.EditDistance","page":"API Reference","title":"BioAlignments.EditDistance","text":"Edit distance.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.HammingDistance","page":"API Reference","title":"BioAlignments.HammingDistance","text":"Hamming distance.\n\nA special case of EditDistance with the costs of insertion and deletion are infinitely large.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.LevenshteinDistance","page":"API Reference","title":"BioAlignments.LevenshteinDistance","text":"Levenshtein distance.\n\nA special case of EditDistance with the costs of mismatch, insertion, and deletion are 1.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.AbstractScoreModel","page":"API Reference","title":"BioAlignments.AbstractScoreModel","text":"Supertype of score model.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.AffineGapScoreModel","page":"API Reference","title":"BioAlignments.AffineGapScoreModel","text":"AffineGapScoreModel(submat, gap_open, gap_extend)\nAffineGapScoreModel(submat, gap_open=, gap_extend=)\nAffineGapScoreModel(match=, mismatch=, gap_open=, gap_extend=)\n\nAffine gap scoring model.\n\nThis creates an affine gap scroing model object for alignment from a substitution matrix (submat), a gap opening score (gap_open), and a gap extending score (gap_extend). A consecutive gap of length k has a score of gap_open + gap_extend * k. Note that both of the gap scores should be non-positive.  As a shorthand of creating a dichotomous substitution matrix, you can write as, for example, AffineGapScoreModel(match=5, mismatch=-3, gap_open=-2, gap_extend=-1).\n\nExample\n\nusing BioSequences\nusing BioAlignments\n\n# create an affine gap scoring model from a predefined substitution\n# matrix and gap opening/extending scores.\naffinegap = AffineGapScoreModel(BLOSUM62, gap_open=-10, gap_extend=-1)\n\n# run global alignment between two amino acid sequenecs\npairalign(GlobalAlignment(), aa\"IDGAAGQQL\", aa\"IDGATGQL\", affinegap)\n\nSee also: SubstitutionMatrix, pairalign, CostModel\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.AbstractCostModel","page":"API Reference","title":"BioAlignments.AbstractCostModel","text":"Supertype of cost model.\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.CostModel","page":"API Reference","title":"BioAlignments.CostModel","text":"CostModel(submat, insertion, deletion)\nCostModel(submat, insertion=, deletion=)\nCostModel(match=, mismatch=, insertion=, deletion=)\n\nCost model.\n\nThis creates a cost model object for alignment from substitution matrix (submat), an insertion cost (insertion), and a deletion cost (deletion). Note that both of the insertion and deletion costs should be non-negative.  As a shorthand of creating a dichotomous substitution matrix, you can write as, for example, CostModel(match=0, mismatch=1, insertion=2, deletion=2).\n\nExample\n\nusing BioAlignments\n\n# create a cost model from a substitution matrix and indel costs\ncost = CostModel(ones(128, 128) - eye(128), insertion=.5, deletion=.5)\n\n# run global alignment to minimize edit distance\npairalign(EditDistance(), \"intension\", \"execution\", cost)\n\nSee also: SubstitutionMatrix, pairalign, AffineGapScoreModel\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.PairwiseAlignmentResult","page":"API Reference","title":"BioAlignments.PairwiseAlignmentResult","text":"Result of pairwise alignment\n\n\n\n\n\n","category":"type"},{"location":"references/#BioAlignments.pairalign","page":"API Reference","title":"BioAlignments.pairalign","text":"pairalign(type, seq, ref, model, [options...])\n\nRun pairwise alignment between two sequences: seq and ref.\n\nAvailable types are:\n\nGlobalAlignment()\nLocalAlignment()\nSemiGlobalAlignment()\nOverlapAlignment()\nEditDistance()\nLevenshteinDistance()\nHammingDistance()\n\nGlobalAlignment, LocalAlignment, SemiGlobalAlignment, and OverlapAlignment are problem that maximizes alignment score between two sequences.  Therefore, model should be an instance of AbstractScoreModel (e.g. AffineGapScoreModel).\n\nEditDistance, LevenshteinDistance, and HammingDistance are problem that minimizes alignment cost between two sequences.  As for EditDistance, model should be an instance of AbstractCostModel (e.g. CostModel). LevenshteinDistance and HammingDistance have predefined a cost model, so users cannot specify a cost model for these alignment types.\n\nWhen you pass the score_only=true or distance_only=true option to pairalign, the result of pairwise alignment holds alignment score/distance only.  This may enable some algorithms to run faster than calculating full alignment result.  Other available options are documented for each alignemnt type.\n\nExample\n\nusing BioSequences\nusing BioAlignments\n\n# create affine gap scoring model\naffinegap = AffineGapScoreModel(\n    match=5,\n    mismatch=-4,\n    gap_open=-5,\n    gap_extend=-3\n)\n\n# run global alignment between two DNA sequences\npairalign(GlobalAlignment(), dna\"AGGTAG\", dna\"ATTG\", affinegap)\n\n# run local alignment between two DNA sequences\npairalign(LocalAlignment(), dna\"AGGTAG\", dna\"ATTG\", affinegap)\n\n# you cannot specify a cost model in LevenshteinDistance\npairalign(LevenshteinDistance(), dna\"AGGTAG\", dna\"ATTG\")\n\nSee also: AffineGapScoreModel, CostModel\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.score","page":"API Reference","title":"BioAlignments.score","text":"score(alignment_result)\n\nReturn score of alignment.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioGenerics.distance","page":"API Reference","title":"BioGenerics.distance","text":"distance(alignment_result)\n\nRetrun distance of alignment.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.alignment","page":"API Reference","title":"BioAlignments.alignment","text":"alignment(alignment_result)\n\nReturn alignment if any.\n\nSee also: hasalignment\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.hasalignment","page":"API Reference","title":"BioAlignments.hasalignment","text":"hasalignment(alignment_result)\n\nCheck if alignment is stored or not.\n\n\n\n\n\n","category":"function"},{"location":"references/#BioAlignments.seq2ref-Tuple{PairwiseAlignment,Integer}","page":"API Reference","title":"BioAlignments.seq2ref","text":"seq2ref(aln::PairwiseAlignment, i::Integer)::Tuple{Int,Operation}\n\nMap a position i from the first sequence to the second.\n\n\n\n\n\n","category":"method"},{"location":"references/#BioAlignments.ref2seq-Tuple{PairwiseAlignment,Integer}","page":"API Reference","title":"BioAlignments.ref2seq","text":"ref2seq(aln::PairwiseAlignment, i::Integer)::Tuple{Int,Operation}\n\nMap a position i from the second sequence to the first.\n\n\n\n\n\n","category":"method"},{"location":"alignments/#Alignment-representation-1","page":"Alignment representation","title":"Alignment representation","text":"","category":"section"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"CurrentModule = BioAlignments\nDocTestSetup = quote\n    using BioSequences\n    using BioAlignments\nend","category":"page"},{"location":"alignments/#Overview-1","page":"Alignment representation","title":"Overview","text":"","category":"section"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Types related to alignment representation introduced in this chapter are indispensable concepts to use this package. Specifically, Alignment, AlignmentAnchor and Operation are the most fundamental types of this package to represent an alignment of two sequences.","category":"page"},{"location":"alignments/#Representing-alignments-1","page":"Alignment representation","title":"Representing alignments","text":"","category":"section"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"The Alignment type can represent a wide variety of global or local sequence alignments while facilitating efficient coordinate transformation.  Alignments are always relative to a possibly unspecified reference sequence and represent a series of edit operations performed on that reference to transform it to the query sequence. An edit operation is, for example, matching, insertion, or deletion.  All operations defined in BioAlignments.jl are described in the Alignment operations section.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"To represent an alignment we use a series of \"anchors\" stored in the AlignmentAnchor type. Anchors are form of run-length encoding alignment operations, but rather than store an operation along with a length, we store the end-point of that operation in both reference and query coordinates.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"struct AlignmentAnchor\n    seqpos::Int\n    refpos::Int\n    op::Operation\nend","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"The next figure shows a schematic representation of an alignment object.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"(Image: Alignment representation)","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Every alignment starts with a special OP_START operation which is used to give the position in the reference and query prior to the start of the alignment, or 0, if the alignment starts at position 1.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"For example, consider the following alignment:","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"              0   4        9  12 15     19\n              |   |        |  |  |      |\n    query:     TGGC----ATCATTTAACG---CAAG\nreference: AGGGTGGCATTTATCAG---ACGTTTCGAGAC\n              |   |   |    |     |  |   |\n              4   8   12   17    20 23  27","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Using anchors we would represent this as the following series of anchors:","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"[\n    AlignmentAnchor( 0,  4, OP_START),\n    AlignmentAnchor( 4,  8, OP_MATCH),\n    AlignmentAnchor( 4, 12, OP_DELETE),\n    AlignmentAnchor( 9, 17, OP_MATCH),\n    AlignmentAnchor(12, 17, OP_INSERT),\n    AlignmentAnchor(15, 20, OP_MATCH),\n    AlignmentAnchor(15, 23, OP_DELETE),\n    AlignmentAnchor(19, 27, OP_MATCH),\n]","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"An Alignment object can be created from a series of anchors:","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"julia> Alignment([\n           AlignmentAnchor(0,  4, OP_START),\n           AlignmentAnchor(4,  8, OP_MATCH),\n           AlignmentAnchor(4, 12, OP_DELETE)\n       ])\nAlignment:\n  aligned range:\n    seq: 0-4\n    ref: 4-12\n  CIGAR string: 4M4D","category":"page"},{"location":"alignments/#Alignment-operations-1","page":"Alignment representation","title":"Alignment operations","text":"","category":"section"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Alignment operations follow closely from those used in the SAM/BAM format and are stored in the Operation bitstype.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Operation Operation Type Description\nOP_MATCH match non-specific match\nOP_INSERT insert insertion into reference sequence\nOP_DELETE delete deletion from reference sequence\nOP_SKIP delete (typically long) deletion from the reference, e.g. due to RNA splicing\nOP_SOFT_CLIP insert sequence removed from the beginning or end of the query sequence but stored\nOP_HARD_CLIP insert sequence removed from the beginning or end of the query sequence and not stored\nOP_PAD special not currently supported, but present for SAM/BAM compatibility\nOP_SEQ_MATCH match match operation with matching sequence positions\nOP_SEQ_MISMATCH match match operation with mismatching sequence positions\nOP_BACK special not currently supported, but present for SAM/BAM compatibility\nOP_START special indicate the start of an alignment within the reference and query sequence","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"Each operation has its own one-letter representation, which is the same as those defined in the SAM file format.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"julia> convert(Operation, 'M')  # Char => Operation\nOP_MATCH\n\njulia> convert(Char, OP_MATCH)  # Operation => Char\n'M': ASCII/Unicode U+004d (category Lu: Letter, uppercase)\n\njulia> ismatchop(OP_MATCH)\ntrue\n","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"See the Operations section in the references for more details.","category":"page"},{"location":"alignments/#Aligned-sequences-1","page":"Alignment representation","title":"Aligned sequences","text":"","category":"section"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"A sequence aligned to another sequence is represented by the AlignedSequence type, which is a pair of the aligned sequence and an Alignment object.","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"The following example creates an aligned sequence object from a sequence and an alignment:","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"julia> AlignedSequence(  # pass an Alignment object\n           dna\"ACGTAT\",\n           Alignment([\n               AlignmentAnchor(0, 0, OP_START),\n               AlignmentAnchor(3, 3, OP_MATCH),\n               AlignmentAnchor(6, 3, OP_INSERT)\n           ])\n       )\n···---\nACGTAT\n\njulia> AlignedSequence(  # or pass a vector of anchors\n           dna\"ACGTAT\",\n           [\n               AlignmentAnchor(0, 0, OP_START),\n               AlignmentAnchor(3, 3, OP_MATCH),\n               AlignmentAnchor(6, 3, OP_INSERT)\n           ]\n       )\n···---\nACGTAT\n","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"If you already have an aligned sequence with gap symbols, it can be converted to an AlignedSequence object by passing a reference sequence with it:","category":"page"},{"location":"alignments/#","page":"Alignment representation","title":"Alignment representation","text":"julia> seq = dna\"ACGT--AAT--\"\n11nt DNA Sequence:\nACGT--AAT--\n\njulia> ref = dna\"ACGTTTAT-GG\"\n11nt DNA Sequence:\nACGTTTAT-GG\n\njulia> AlignedSequence(seq, ref)\n········-··\nACGT--AAT--\n","category":"page"},{"location":"#BioAlignments-1","page":"Home","title":"BioAlignments","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: Latest release) (Image: MIT license) (Image: Stable documentation) (Image: Latest documentation) (Image: Project Status: Active – The project has reached a stable, usable state and is being actively developed.) (Image: Gitter)","category":"page"},{"location":"#Description-1","page":"Home","title":"Description","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioAlignments provides alignment algorithms and data structures.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioAlignments is made available to install through BioJulia's package registry. By default, Julia's package manager only uses the \"General\" package registry. Your Julia configuration needs to include the BioJulia registry to be able to install the latest version of BioAlignments.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"To add the BioJulia registry from the Julia REPL, press ] to enter pkg mode, then enter the following command:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"registry add https://github.com/BioJulia/BioJuliaRegistry.git","category":"page"},{"location":"#","page":"Home","title":"Home","text":"After adding the registry to your configuration, you can install BioAlignments while in pkg mode with the following:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"add BioAlignments","category":"page"},{"location":"#","page":"Home","title":"Home","text":"If you are interested in the cutting edge of the development, please check out the develop branch to try new features before release.","category":"page"},{"location":"#Testing-1","page":"Home","title":"Testing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"BioAlignments is tested against Julia 1.X on Linux, OS X, and Windows.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Latest build status:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: Build Status) (Image: appveyor) (Image: codecov)","category":"page"},{"location":"#Contributing-1","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We appreciate contributions from users including reporting bugs, fixing issues, improving performance and adding new features.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Take a look at the contributing files detailed contributor and maintainer guidelines, and code of conduct.","category":"page"},{"location":"#Financial-contributions-1","page":"Home","title":"Financial contributions","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We also welcome financial contributions in full transparency on our open collective. Anyone can file an expense. If the expense makes sense for the development of the community, it will be \"merged\" in the ledger of our open collective by the core contributors and the person who filed the expense will be reimbursed.","category":"page"},{"location":"#Backers-and-Sponsors-1","page":"Home","title":"Backers & Sponsors","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Thank you to all our backers and sponsors!","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Love our work and community? Become a backer.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: backers)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Does your company use BioJulia? Help keep BioJulia feature rich and healthy by sponsoring the project. Your logo will show up here with a link to your website.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: ) (Image: )","category":"page"},{"location":"#Questions?-1","page":"Home","title":"Questions?","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"If you have a question about contributing or using BioJulia software, come on over and chat to us on Gitter, or you can try the Bio category of the Julia discourse site.","category":"page"},{"location":"pairalign/#Pairwise-alignment-1","page":"Pairwise alignment","title":"Pairwise alignment","text":"","category":"section"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"CurrentModule = BioAlignments\nDocTestSetup = quote\n    using BioSequences\n    using BioAlignments\nend","category":"page"},{"location":"pairalign/#Overview-1","page":"Pairwise alignment","title":"Overview","text":"","category":"section"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"Pairwise alignment is a sequence alignment between two sequences. BioAlignments.jl implements several pairwise alignment algorithms that maximize alignment score or minimize alignment cost. If you are interested in handling the results of pairwise alignments, it is highly recommended to read the Alignment representation chapter in advance to get used to the alignment representation.","category":"page"},{"location":"pairalign/#Alignment-types-and-scoring-models-1","page":"Pairwise alignment","title":"Alignment types and scoring models","text":"","category":"section"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"A pairwise alignment problem has two factors: an alignment type and a score/cost model. The alignment type specifies the alignment range (e.g. global, local, etc.) and the score/cost model specifies parameters of the alignment operations.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"pairalign is a function to run alignment, which is exported from the BioAlignments module.  It takes an alignment type as its first argument, then two sequences to align, and finally a score model. Currently, the following four types of alignments are supported:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"GlobalAlignment: global-to-global alignment\nSemiGlobalAlignment: local-to-global alignment\nLocalAlignment: local-to-local alignment\nOverlapAlignment: end-free alignment","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"For scoring model, AffineGapScoreModel is currently supported. It imposes an affine gap penalty for insertions and deletions: gap_open + k * gap_extend for a consecutive insertion/deletion of length k. The affine gap penalty is flexible enough to create a constant and linear scoring model. Setting gap_extend = 0 or gap_open = 0, they are equivalent to the constant or linear gap penalty, respectively. The first argument of AffineGapScoreModel can be a substitution matrix like AffineGapScoreModel(BLOSUM62, gap_open=-10, gap_extend=-1). For details on substitution matrices, see the Substitution matrix types section.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"Alignment type can also be a distance of two sequences:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"EditDistance\nLevenshteinDistance\nHammingDistance","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"In this alignment, CostModel is used instead of AffineGapScoreModel to define cost of substitution, insertion, and deletion:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> costmodel = CostModel(match=0, mismatch=1, insertion=1, deletion=1);\n\njulia> pairalign(EditDistance(), \"abcd\", \"adcde\", costmodel)\nPairwiseAlignmentResult{Int64,String,String}:\n  distance: 2\n  seq: 1 abcd- 4\n         | ||\n  ref: 1 adcde 5\n","category":"page"},{"location":"pairalign/#Operations-on-pairwise-alignment-1","page":"Pairwise alignment","title":"Operations on pairwise alignment","text":"","category":"section"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"The example below shows a use case of some operations:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> s1 = dna\"CCTAGGAGGG\";\n\njulia> s2 = dna\"ACCTGGTATGATAGCG\";\n\njulia> scoremodel = AffineGapScoreModel(EDNAFULL, gap_open=-5, gap_extend=-1);\n\njulia> res = pairalign(GlobalAlignment(), s1, s2, scoremodel)  # run pairwise alignment\nPairwiseAlignmentResult{Int64,BioSequences.LongSequence{BioSequences.DNAAlphabet{4}},BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}:\n  score: 13\n  seq:  0 -CCTAGG------AGGG 10\n           ||| ||      || |\n  ref:  1 ACCT-GGTATGATAGCG 16\n\n\njulia> score(res)  # get the achieved score of this alignment\n13\n\njulia> aln = alignment(res)\nPairwiseAlignment{BioSequences.LongSequence{BioSequences.DNAAlphabet{4}},BioSequences.LongSequence{BioSequences.DNAAlphabet{4}}}:\n  seq:  0 -CCTAGG------AGGG 10\n           ||| ||      || |\n  ref:  1 ACCT-GGTATGATAGCG 16\n\n\njulia> count_matches(aln)\n8\n\njulia> count_mismatches(aln)\n1\n\njulia> count_insertions(aln)\n1\n\njulia> count_deletions(aln)\n7\n\njulia> count_aligned(aln)\n17\n\njulia> collect(aln)  # pairwise alignment is iterable\n17-element Array{Tuple{BioSymbols.DNA,BioSymbols.DNA},1}:\n (DNA_Gap, DNA_A)\n (DNA_C, DNA_C)\n (DNA_C, DNA_C)\n (DNA_T, DNA_T)\n (DNA_A, DNA_Gap)\n (DNA_G, DNA_G)\n (DNA_G, DNA_G)\n (DNA_Gap, DNA_T)\n (DNA_Gap, DNA_A)\n (DNA_Gap, DNA_T)\n (DNA_Gap, DNA_G)\n (DNA_Gap, DNA_A)\n (DNA_Gap, DNA_T)\n (DNA_A, DNA_A)\n (DNA_G, DNA_G)\n (DNA_G, DNA_C)\n (DNA_G, DNA_G)\n\njulia> LongDNASeq([x for (x, _) in aln])  # create aligned `s1` with gaps\n17nt DNA Sequence:\n-CCTAGG------AGGG\n\njulia> LongDNASeq([y for (_, y) in aln])  # create aligned `s2` with gaps\n17nt DNA Sequence:\nACCT-GGTATGATAGCG\n","category":"page"},{"location":"pairalign/#Substitution-matrix-types-1","page":"Pairwise alignment","title":"Substitution matrix types","text":"","category":"section"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"A substitution matrix is a function of substitution score (or cost) from one symbol to other. Substitution value of submat from x to y can be obtained by writing submat[x,y]. In BioAlignments.jl, SubstitutionMatrix and DichotomousSubstitutionMatrix are two distinct types representing substitution matrices.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"SubstitutionMatrix is a general substitution matrix type that is a thin wrapper of regular matrix.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"Some common substitution matrices are provided. For DNA and RNA, EDNAFULL is defined:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> EDNAFULL\nSubstitutionMatrix{BioSymbols.DNA,Int64}:\n     A  C  M  G  R  S  V  T  W  Y  H  K  D  B  N\n  A  5 -4  1 -4  1 -4 -1 -4  1 -4 -1 -4 -1 -4 -2\n  C -4  5  1 -4 -4  1 -1 -4 -4  1 -1 -4 -4 -1 -2\n  M  1  1 -1 -4 -2 -2 -1 -4 -2 -2 -1 -4 -3 -3 -1\n  G -4 -4 -4  5  1  1 -1 -4 -4 -4 -4  1 -1 -1 -2\n  R  1 -4 -2  1 -1 -2 -1 -4 -2 -4 -3 -2 -1 -3 -1\n  S -4  1 -2  1 -2 -1 -1 -4 -4 -2 -3 -2 -3 -1 -1\n  V -1 -1 -1 -1 -1 -1 -1 -4 -3 -3 -2 -3 -2 -2 -1\n  T -4 -4 -4 -4 -4 -4 -4  5  1  1 -1  1 -1 -1 -2\n  W  1 -4 -2 -4 -2 -4 -3  1 -1 -2 -1 -2 -1 -3 -1\n  Y -4  1 -2 -4 -4 -2 -3  1 -2 -1 -1 -2 -3 -1 -1\n  H -1 -1 -1 -4 -3 -3 -2 -1 -1 -1 -1 -3 -2 -2 -1\n  K -4 -4 -4  1 -2 -2 -3  1 -2 -2 -3 -1 -1 -1 -1\n  D -1 -4 -3 -1 -1 -3 -2 -1 -1 -3 -2 -1 -1 -2 -1\n  B -4 -1 -3 -1 -3 -1 -2 -1 -3 -1 -2 -1 -2 -1 -1\n  N -2 -2 -1 -2 -1 -1 -1 -2 -1 -1 -1 -1 -1 -1 -1\n(underlined values are default ones)\n","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"For amino acids, PAM (Point Accepted Mutation) and BLOSUM (BLOcks SUbstitution Matrix) matrices are defined:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> BLOSUM62\nSubstitutionMatrix{BioSymbols.AminoAcid,Int64}:\n     A  R  N  D  C  Q  E  G  H  I  L  K  M  F  P  S  T  W  Y  V  O  U  B  J  Z  X  *\n  A  4 -1 -2 -2  0 -1 -1  0 -2 -1 -1 -1 -1 -2 -1  1  0 -3 -2  0  0̲  0̲ -2  0̲ -1  0 -4\n  R -1  5  0 -2 -3  1  0 -2  0 -3 -2  2 -1 -3 -2 -1 -1 -3 -2 -3  0̲  0̲ -1  0̲  0 -1 -4\n  N -2  0  6  1 -3  0  0  0  1 -3 -3  0 -2 -3 -2  1  0 -4 -2 -3  0̲  0̲  3  0̲  0 -1 -4\n  D -2 -2  1  6 -3  0  2 -1 -1 -3 -4 -1 -3 -3 -1  0 -1 -4 -3 -3  0̲  0̲  4  0̲  1 -1 -4\n  C  0 -3 -3 -3  9 -3 -4 -3 -3 -1 -1 -3 -1 -2 -3 -1 -1 -2 -2 -1  0̲  0̲ -3  0̲ -3 -2 -4\n  Q -1  1  0  0 -3  5  2 -2  0 -3 -2  1  0 -3 -1  0 -1 -2 -1 -2  0̲  0̲  0  0̲  3 -1 -4\n  E -1  0  0  2 -4  2  5 -2  0 -3 -3  1 -2 -3 -1  0 -1 -3 -2 -2  0̲  0̲  1  0̲  4 -1 -4\n  G  0 -2  0 -1 -3 -2 -2  6 -2 -4 -4 -2 -3 -3 -2  0 -2 -2 -3 -3  0̲  0̲ -1  0̲ -2 -1 -4\n  H -2  0  1 -1 -3  0  0 -2  8 -3 -3 -1 -2 -1 -2 -1 -2 -2  2 -3  0̲  0̲  0  0̲  0 -1 -4\n  I -1 -3 -3 -3 -1 -3 -3 -4 -3  4  2 -3  1  0 -3 -2 -1 -3 -1  3  0̲  0̲ -3  0̲ -3 -1 -4\n  L -1 -2 -3 -4 -1 -2 -3 -4 -3  2  4 -2  2  0 -3 -2 -1 -2 -1  1  0̲  0̲ -4  0̲ -3 -1 -4\n  K -1  2  0 -1 -3  1  1 -2 -1 -3 -2  5 -1 -3 -1  0 -1 -3 -2 -2  0̲  0̲  0  0̲  1 -1 -4\n  M -1 -1 -2 -3 -1  0 -2 -3 -2  1  2 -1  5  0 -2 -1 -1 -1 -1  1  0̲  0̲ -3  0̲ -1 -1 -4\n  F -2 -3 -3 -3 -2 -3 -3 -3 -1  0  0 -3  0  6 -4 -2 -2  1  3 -1  0̲  0̲ -3  0̲ -3 -1 -4\n  P -1 -2 -2 -1 -3 -1 -1 -2 -2 -3 -3 -1 -2 -4  7 -1 -1 -4 -3 -2  0̲  0̲ -2  0̲ -1 -2 -4\n  S  1 -1  1  0 -1  0  0  0 -1 -2 -2  0 -1 -2 -1  4  1 -3 -2 -2  0̲  0̲  0  0̲  0  0 -4\n  T  0 -1  0 -1 -1 -1 -1 -2 -2 -1 -1 -1 -1 -2 -1  1  5 -2 -2  0  0̲  0̲ -1  0̲ -1  0 -4\n  W -3 -3 -4 -4 -2 -2 -3 -2 -2 -3 -2 -3 -1  1 -4 -3 -2 11  2 -3  0̲  0̲ -4  0̲ -3 -2 -4\n  Y -2 -2 -2 -3 -2 -1 -2 -3  2 -1 -1 -2 -1  3 -3 -2 -2  2  7 -1  0̲  0̲ -3  0̲ -2 -1 -4\n  V  0 -3 -3 -3 -1 -2 -2 -3 -3  3  1 -2  1 -1 -2 -2  0 -3 -1  4  0̲  0̲ -3  0̲ -2 -1 -4\n  O  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲\n  U  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲\n  B -2 -1  3  4 -3  0  1 -1  0 -3 -4  0 -3 -3 -2  0 -1 -4 -3 -3  0̲  0̲  4  0̲  1 -1 -4\n  J  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲  0̲\n  Z -1  0  0  1 -3  3  4 -2  0 -3 -3  1 -1 -3 -1  0 -1 -3 -2 -2  0̲  0̲  1  0̲  4 -1 -4\n  X  0 -1 -1 -1 -2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -2  0  0 -2 -1 -1  0̲  0̲ -1  0̲ -1 -1 -4\n  * -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4  0̲  0̲ -4  0̲ -4 -4  1\n(underlined values are default ones)\n","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"Matrix Constants\nPAM PAM30, PAM70, PAM250\nBLOSUM BLOSUM45, BLOSUM50, BLOSUM62, BLOSUM80, BLOSUM90","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"These matrices are downloaded from: ftp://ftp.ncbi.nih.gov/blast/matrices/.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"SubstitutionMatrix can be modified like a regular matrix:","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> mysubmat = copy(BLOSUM62);  # create a copy\n\njulia> mysubmat[AA_A,AA_R]  # score of AA_A => AA_R substitution is -1\n-1\n\njulia> mysubmat[AA_A,AA_R] = -3  # set the score to -3\n-3\n\njulia> mysubmat[AA_A,AA_R]  # the score is modified\n-3\n","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"Make sure to create a copy of the original matrix when you create a matrix from a predefined matrix. In the above case, BLOSUM62 is shared in the whole program and modification on it will affect any result that uses BLOSUM62.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"DichotomousSubstitutionMatrix is a specialized matrix for matching or mismatching substitution.  This is a preferable choice when performance is more important than flexibility because looking up score is faster than SubstitutionMatrix.","category":"page"},{"location":"pairalign/#","page":"Pairwise alignment","title":"Pairwise alignment","text":"julia> submat = DichotomousSubstitutionMatrix(1, -1)\nDichotomousSubstitutionMatrix{Int64}:\n     match =  1\n  mismatch = -1\n\njulia> submat['A','A']  # match\n1\n\njulia> submat['A','B']  # mismatch\n-1\n","category":"page"}]
}
